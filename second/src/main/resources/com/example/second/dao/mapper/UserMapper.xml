<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.second.dao.UserDao">
    <resultMap id="BaseResultMap" type="com.example.second.entity.User" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="username" property="username" jdbcType="VARCHAR" />
        <result column="company" property="company" jdbcType="CHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="enabled" property="enabled" jdbcType="BIT" />
        <result column="registTime" property="registTime" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="CHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, username, company, password, name, email, enabled, registTime, status
    </sql>

   <select id="loadUserByUsername" resultMap="BaseResultMap">
    select * from user where username=#{username};
   </select>

    <select id="getRolesById" resultType="com.example.second.entity.Role">
        select r.* from role r,user_role ur where ur.rid = r.id and ur.uid = #{id}
    </select>

    <select id="findAllUsers" resultType="com.example.second.entity.User">
        select * from user;
    </select>

    <select id="findUser" parameterType="java.lang.Integer" resultType="com.example.second.entity.User">
        select * from user where id = #{id}
    </select>

    <select id="findUserByName" parameterType="java.lang.String" resultType="com.example.second.entity.User">
        select * from user where username = #{username}
    </select>

    <select id="findUserByStatus" parameterType="java.lang.Boolean" resultType="com.example.second.entity.User">
        select * from user where enabled = #{enabled}
    </select>

    <select id="findCompanyByUsername" parameterType="java.lang.String" resultType="com.example.second.entity.User">
        select * from user where company = #{company} and username = #{username}
    </select>

    <delete id="deleteUserById" parameterType="java.lang.Integer">
        delete from user where id = #{id}
    </delete>

    <insert id="addUser" parameterType="com.example.second.entity.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="company != null" >
                company,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="email != null" >
                email,
            </if>
            <if test="enabled != null" >
                enabled,
            </if>
            <if test="registTime != null" >
                registTime,
            </if>
            <if test="status != null" >
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="company != null" >
                #{company,jdbcType=CHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="enabled != null" >
                #{enabled,jdbcType=BIT},
            </if>
            <if test="registTime != null" >
                #{registTime,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                #{status,jdbcType=CHAR},
            </if>
        </trim>
    </insert>

    <insert id="addRole" parameterType="com.example.second.entity.UserRole">
        insert into role
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="uid != null" >
                uid,
            </if>
            <if test="rid != null" >
                rid,
            </if>
            </trim>
            <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="uid != null" >
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="rid != null" >
                #{rid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <select id="getUserByName" parameterType="com.example.second.entity.User" resultMap="BaseResultMap">
        select *
        from user
        where username = #{username}
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>

    <insert id="insert" parameterType="com.example.second.entity.User" useGeneratedKeys="true" keyProperty="id">
    insert into user (id, username, company, password, name, email, enabled, registTime, status)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{company,jdbcType=CHAR}, #{password,jdbcType=VARCHAR},
            #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{enabled,jdbcType=BIT}, #{registTime,jdbcType=VARCHAR},#{status,jdbcType=CHAR})
  </insert>

    <insert id="insert_role" parameterType="com.example.second.entity.UserRole">
        insert into user_role (uid,rid)
        values (#{uid,jdbcType=INTEGER}, #{rid,jdbcType=INTEGER});
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.example.second.entity.User" >
        update user
        <set >
            <if test="username != null" >
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="company != null" >
                company = #{company,jdbcType=CHAR},
            </if>
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                email = #{email,jdbcType=VARCHAR},
            </if>
<!--            <if test="enabled != null" >-->
<!--                enabled = #{enabled,jdbcType=BIT},-->
<!--            </if>-->
<!--            <if test="registTime != null" >-->
<!--                registTime = #{registTime,jdbcType=VARCHAR},-->
<!--            </if>-->
<!--            <if test="status != null" >-->
<!--                status = #{status,jdbcType=CHAR},,-->
<!--            </if>-->
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.second.entity.User" >
        update user
        set username = #{username,jdbcType=VARCHAR},
            company = #{company,jdbcType=CHAR},
            password = #{password,jdbcType=VARCHAR},
            name = #{name,jdbcType=VARCHAR},
            email = #{email,jdbcType=VARCHAR},
            enabled = #{enabled,jdbcType=BIT},
            registTime = #{registTime,jdbcType=VARCHAR},
            status = #{status,jdbcType=CHAR},
            where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>    